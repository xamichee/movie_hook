{"version":3,"sources":["Header/Header.jsx","App/GenresContext.jsx","MoviesItem/MoviesItem.jsx","MoviesItem/voteColor.js","MoviesList/MoviesList.jsx","Search/Search.jsx","App/App.jsx","index.jsx"],"names":["Header","tabClick","active","classSearch","classRated","className","type","onClick","name","GenresContext","React","createContext","MoviesItem","props","vote","movie","rateMovie","useState","loading","setLoading","id","title","releaseDate","release_date","posterPath","poster_path","overview","rating","voteAverage","vote_average","genre","genre_ids","poster","date","format","Date","spin","allGenres","useContext","genresToShow","map","item","find","elem","cardColor","ratingRender","src","alt","onLoad","style","backgroundColor","count","allowHalf","defaultValue","onChange","value","MoviesList","movieList","Search","submit","defaultProps","debounce","event","target","onLabelChange","onSubmit","preventDefault","placeholder","App","searchString","setSearchString","searchPage","setSearchPage","activePage","setActivePage","movieListFull","setMovieListFull","totalResults","setTotalResults","error","setError","genres","setGenres","localStorage","getItem","guestKey","setGuestKey","activeTab","setActiveTab","ratedMovies","setRatedMovies","apiBase","apiKey","useEffect","fetch","then","res","json","obj","setItem","guest_session_id","body","results","total_results","err","list","slice","showError","message","description","listToRender","paginator","length","current","total","num","nextPage","Math","ceil","showSizeChanger","pages","size","Provider","method","headers","JSON","stringify","showTab","label","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.198481e6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Header.css';\n\nexport default function Header({ tabClick, active }) {\n  Header.propTypes = {\n    tabClick: PropTypes.func.isRequired,\n    active: PropTypes.string.isRequired,\n  };\n\n  const classSearch = active === 'Search' ? 'tabButton chosen' : 'tabButton';\n  const classRated = active === 'Rated' ? 'tabButton chosen' : 'tabButton';\n\n  return (\n    <div className=\"header\">\n      <div>\n        <button className={classSearch} type=\"button\" onClick={tabClick} name=\"Search\">\n          Search\n        </button>\n      </div>\n      <div>\n        <button className={classRated} type=\"button\" onClick={tabClick} name=\"Rated\">\n          Rated\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nconst GenresContext = React.createContext([]);\n\nexport default GenresContext;\n","import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Rate, Spin } from 'antd';\nimport { format } from 'date-fns';\n\nimport './MoviesItem.css';\nimport GenresContext from '../App/GenresContext';\nimport voteColor from './voteColor';\n\nfunction MoviesItem(props) {\n  const { movie, rateMovie, active } = props;\n\n  const [loading, setLoading] = useState(true);\n\n  const {\n    id,\n    title,\n    release_date: releaseDate,\n    poster_path: posterPath,\n    overview,\n    rating,\n    vote_average: voteAverage,\n    genre_ids: genre,\n  } = movie;\n\n  const poster = posterPath\n    ? `https://image.tmdb.org/t/p/w200${posterPath}`\n    : 'https://apps.alldbx.de/images/default_person.1d043.png';\n  const date = releaseDate ? format(new Date(releaseDate), 'MMMM dd, yyyy') : 'NA';\n\n  const spin = loading ? <Spin /> : null;\n\n  MoviesItem.propTypes = {\n    movie: PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      release_date: PropTypes.string,\n      poster_path: PropTypes.string,\n      overview: PropTypes.string,\n      rating: PropTypes.number,\n      vote_average: PropTypes.number,\n      genre_ids: PropTypes.arrayOf(PropTypes.number),\n    }).isRequired,\n    rateMovie: PropTypes.func.isRequired,\n    active: PropTypes.string.isRequired,\n  };\n\n  const allGenres = useContext(GenresContext);\n\n  const genresToShow = genre.map((item) => (\n    <span className=\"genre\" key={item}>\n      {allGenres.find((elem) => elem.id === item).name}\n    </span>\n  ));\n\n  const cardColor = voteColor(voteAverage);\n\n  const ratingRender = active === 'Rated' ? rating : voteAverage;\n\n  return (\n    <div className=\"card\">\n      <div className=\"moviePoster\">\n        {spin}\n        <img src={poster} alt=\"poster\" onLoad={() => setLoading(false)} />\n      </div>\n      <div className=\"movieInfo\">\n        <div className=\"movieTitle\">\n          <span>{title}</span>\n          <div className=\"movieRating\" style={{ backgroundColor: `${cardColor}` }}>\n            <p>{ratingRender}</p>\n          </div>\n        </div>\n        <div className=\"date\">\n          <span>{date}</span>\n        </div>\n        <div className=\"movieGenres\">{genresToShow}</div>\n        <div className=\"movieSinops\">\n          <span>{overview}</span>\n        </div>\n        <div className=\"stars\">\n          <Rate count={10} allowHalf defaultValue={ratingRender} onChange={(value) => rateMovie(value, id)} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MoviesItem;\n","export default function voteColor(vote) {\r\n  if (vote <= 3) return \"#E90000\";\r\n  if (vote <= 5) return \"#E97E00\";\r\n  if (vote <= 7) return \"#E9D100\";\r\n  return \"#66E900\";\r\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport MoviesItem from '../MoviesItem/MoviesItem';\n\nimport './MoviesList.css';\n\nfunction MoviesList(props) {\n  const { movieList, rateMovie, active } = props;\n\n  MoviesList.propTypes = {\n    movieList: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        release_date: PropTypes.string,\n        poster_path: PropTypes.string,\n        overview: PropTypes.string,\n        vote_average: PropTypes.number,\n        genre_ids: PropTypes.arrayOf(PropTypes.number),\n      })\n    ).isRequired,\n    rateMovie: PropTypes.func.isRequired,\n    active: PropTypes.string.isRequired,\n  };\n\n  return (\n    <div className=\"movieslist\">\n      {movieList.map((movie) => (\n        <MoviesItem key={movie.id} movie={movie} rateMovie={rateMovie} active={active} />\n      ))}\n    </div>\n  );\n}\n\nexport default MoviesList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Input } from 'antd';\nimport { debounce } from 'lodash';\n\nfunction Search(props) {\n  const { submit } = props;\n\n  Search.propTypes = {\n    submit: PropTypes.func,\n  };\n\n  Search.defaultProps = {\n    submit: () => {},\n  };\n\n  const onLabelChange = (event) => {\n    const { value } = event.target;\n    if (value) submit(value);\n  };\n\n  return (\n    <form onChange={debounce((event) => onLabelChange(event), 1000)} onSubmit={(event) => event.preventDefault()}>\n      <Input placeholder=\"Type to search\" />\n    </form>\n  );\n}\n\nexport default Search;\n","import React, { useState, useEffect } from 'react';\nimport { Pagination, Alert, Spin } from 'antd';\n\nimport Header from '../Header/Header';\nimport MoviesList from '../MoviesList/MoviesList';\nimport Search from '../Search/Search';\nimport GenresContext from './GenresContext';\n\nimport 'antd/dist/antd.css';\nimport './App.css';\n\nfunction App() {\n  const [searchString, setSearchString] = useState('');\n  const [searchPage, setSearchPage] = useState(1);\n  const [activePage, setActivePage] = useState(1);\n  const [movieListFull, setMovieListFull] = useState([]);\n  const [totalResults, setTotalResults] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [genres, setGenres] = useState([]);\n  const [guestKey, setGuestKey] = useState(localStorage.getItem('guestKey'));\n  const [activeTab, setActiveTab] = useState('Search');\n  const [ratedMovies, setRatedMovies] = useState([]);\n\n  const apiBase = 'https://api.themoviedb.org/3/';\n  const apiKey = '382c03696044ec7006f5212f1c181827';\n\n  useEffect(() => {\n    if (!guestKey) {\n      fetch(`${apiBase}authentication/guest_session/new?api_key=${apiKey}`)\n        .then((res) => res.json())\n        .then((obj) => {\n          localStorage.setItem('guestKey', obj.guest_session_id);\n          setGuestKey(localStorage.getItem('guestKey'));\n        });\n    }\n  }, [guestKey]);\n\n  useEffect(() => {\n    fetch(`${apiBase}genre/movie/list?api_key=${apiKey}&language=en-US`)\n      .then((res) => res.json())\n      .then((obj) => setGenres(obj.genres));\n  }, []);\n\n  useEffect(() => {\n    if (searchString) {\n      try {\n        fetch(\n          `${apiBase}search/movie?api_key=${apiKey}&language=en-US&query=${searchString}&page=${searchPage}&include_adult=false`\n        )\n          .then((res) => res.json())\n          .then((body) => {\n            setMovieListFull([...body.results]);\n            setTotalResults(body.total_results);\n            setLoading(false);\n          });\n      } catch (err) {\n        setError(true);\n      }\n    }\n  }, [searchString, activePage, searchPage]);\n\n  const rateMovie = (value, id) => {\n    fetch(`${apiBase}movie/${id}/rating?api_key=${apiKey}&guest_session_id=${guestKey}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n      },\n      body: JSON.stringify({\n        value: value,\n      }),\n    });\n  };\n\n  const tabClick = (event) => {\n    setActiveTab(event.target.name);\n    if (event.target.name === 'Rated') {\n      setLoading(true);\n      fetch(`${apiBase}guest_session/${guestKey}/rated/movies?api_key=${apiKey}&language=en-US&sort_by=created_at.asc}`)\n        .then((res) => res.json())\n        .then((obj) => {\n          setRatedMovies(obj.results);\n          setLoading(false);\n        });\n    }\n  };\n\n  const pageClick = (num) => {\n    const nextPage = Math.ceil(num / 2);\n\n    if (Math.ceil(activePage / 2) === nextPage) {\n      setActivePage(num);\n      return;\n    }\n    setSearchPage(nextPage);\n    setActivePage(num);\n  };\n\n  const list = activePage % 2 === 0 ? [...movieListFull.slice(10)] : [...movieListFull.slice(0, 10)];\n\n  const onSubmit = (label) => {\n    setSearchString(label);\n    setError(false);\n    setLoading(true);\n    setSearchPage(1);\n    setActivePage(1);\n  };\n\n  const showError = (\n    <Alert\n      className=\"alert\"\n      message=\"Error Text\"\n      description=\"Something goes wrong! But truth is out there...\"\n      type=\"error\"\n    />\n  );\n\n  const listToRender = activeTab === 'Search' ? list : ratedMovies;\n\n  const paginator = listToRender.length ? (\n    <Pagination current={activePage} total={totalResults} onChange={pageClick} showSizeChanger={false} />\n  ) : null;\n\n  const pages = loading ? (\n    <div className=\"spin\">\n      <Spin size=\"large\" />\n    </div>\n  ) : (\n    <div>\n      <GenresContext.Provider value={genres}>\n        <MoviesList movieList={listToRender} rateMovie={rateMovie} active={activeTab} />\n      </GenresContext.Provider>\n      <div className=\"paginator\">{paginator}</div>\n    </div>\n  );\n\n  const showTab =\n    activeTab === 'Search' ? (\n      <div>\n        <Search submit={onSubmit} />\n        {pages}\n      </div>\n    ) : (\n      pages\n    );\n\n  return (\n    <div className=\"wrapper\">\n      <Header tabClick={tabClick} active={activeTab} />\n      {error ? showError : showTab}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}